{
    "appid": "fde8b9da-d38c-45c2-832a-1e1c543ed287",
    "name": "Elasticsearch",
    "description": "This app integrates with an Elasticsearch installation to implement ingestion and investigative actions",
    "publisher": "Splunk",
    "type": "siem",
    "main_module": "elasticsearch_connector.py",
    "app_version": "2.0.5",
    "utctime_updated": "2022-01-13T05:46:19.000000Z",
    "package_name": "phantom_elasticsearch",
    "product_name": "Elasticsearch",
    "product_vendor": "Elastic",
    "product_version_regex": ".*",
    "min_phantom_version": "4.9.39220",
    "python_version": "3",
    "fips_compliant": true,
    "logo": "logo_elastic.svg",
    "logo_dark": "logo_elastic_dark.svg",
    "license": "Copyright (c) 2016-2022 Splunk Inc.",
    "latest_tested_versions": [
        "On-prem: version 5.2.2, February 16 2021"
    ],
    "configuration": {
        "url": {
            "data_type": "string",
            "order": 0,
            "description": "Device URL including the port, e.g. https://myelastic.enterprise.com:9200",
            "required": true
        },
        "verify_server_cert": {
            "data_type": "boolean",
            "description": "Verify server certificate",
            "order": 1,
            "default": false
        },
        "username": {
            "data_type": "string",
            "order": 2,
            "description": "Username"
        },
        "password": {
            "data_type": "password",
            "order": 3,
            "description": "Password"
        },
        "ingest_index": {
            "description": "Ingestion index",
            "data_type": "string",
            "order": 4
        },
        "ingest_type": {
            "description": "Ingestion type",
            "data_type": "string",
            "order": 5
        },
        "ingest_routing": {
            "description": "Ingestion routing",
            "data_type": "string",
            "order": 6
        },
        "ingest_query": {
            "description": "Ingestion query",
            "data_type": "string",
            "order": 7
        },
        "ingest_parser": {
            "description": "Custom Elasticsearch parser",
            "data_type": "file",
            "extensions": ".py",
            "order": 8
        }
    },
    "actions": [
        {
            "action": "test connectivity",
            "description": "Validate the asset configuration for connectivity. This action logs into the device to check the connection and credentials",
            "type": "test",
            "identifier": "test_asset_connectivity",
            "read_only": true,
            "parameters": {},
            "output": [],
            "versions": "EQ(*)"
        },
        {
            "action": "get config",
            "description": "Returns the list of indices and types currently configured on the ElasticSearch instance",
            "type": "investigate",
            "identifier": "get_config",
            "read_only": true,
            "parameters": {},
            "render": {
                "type": "custom",
                "width": 10,
                "height": 5,
                "title": "Get Config",
                "view": "elasticsearch_view.display_config"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.data.*.index",
                    "data_type": "string",
                    "contains": [
                        "elasticsearch index"
                    ]
                },
                {
                    "data_path": "action_result.data.*.types",
                    "data_type": "string",
                    "contains": [
                        "elasticsearch type"
                    ]
                },
                {
                    "data_path": "action_result.summary.total_indices",
                    "data_type": "numeric",
                    "example_values": [
                        20
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Total indices: 20"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "run query",
            "description": "Run a search query on the Elasticsearch installation. Please escape any quotes that are part of the query string",
            "verbose": "The action executes the query on an Elasticsearch installation by doing a POST on the REST endpoint '<b>base_url</b>/<b>index</b>/<b>type</b>/_search' with the input <b>query</b> as the data. Please see the Elasticseach website for query format and documentation.<br>The <b>routing</b> parameter is appended as a parameter in the REST call if specified.<br>As an e.g. the following query returns only the <i>id</i> and <i>name</i> of all the items in an <b>index</b> of the specified <b>type</b><br>{ \"query\": { \"match_all\": {} }, \"_source\": [\"id\", \"name\"]}.",
            "type": "investigate",
            "identifier": "run_query",
            "read_only": true,
            "parameters": {
                "index": {
                    "description": "Index to query on",
                    "data_type": "string",
                    "order": 0,
                    "required": true,
                    "contains": [
                        "elasticsearch index"
                    ],
                    "primary": true
                },
                "type": {
                    "description": "Type to query on",
                    "data_type": "string",
                    "order": 1,
                    "contains": [
                        "elasticsearch type"
                    ],
                    "primary": true
                },
                "routing": {
                    "description": "Shards to query on (routing value)",
                    "data_type": "string",
                    "order": 2
                },
                "query": {
                    "description": "Query to run (in ElasticSearch language)",
                    "data_type": "string",
                    "order": 3,
                    "required": true,
                    "primary": true,
                    "contains": [
                        "elasticsearch query"
                    ]
                }
            },
            "render": {
                "type": "json",
                "width": 10,
                "height": 5,
                "view": "elasticsearch_view.display_query_results",
                "title": "Query Result"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.index",
                    "data_type": "string",
                    "contains": [
                        "elasticsearch index"
                    ],
                    "example_values": [
                        "phantom_index"
                    ]
                },
                {
                    "data_path": "action_result.parameter.query",
                    "data_type": "string",
                    "contains": [
                        "elasticsearch query"
                    ],
                    "example_values": [
                        "{ \"query\": {\"match_all\": {}}}"
                    ]
                },
                {
                    "data_path": "action_result.parameter.routing",
                    "data_type": "string",
                    "example_values": [
                        "user1"
                    ]
                },
                {
                    "data_path": "action_result.parameter.type",
                    "data_type": "string",
                    "contains": [
                        "elasticsearch type"
                    ],
                    "example_values": [
                        "internal"
                    ]
                },
                {
                    "data_path": "action_result.data.*._shards.failed",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*._shards.successful",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*._shards.total",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.hits.hits.*._id",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.hits.hits.*._index",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.hits.hits.*._score",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.hits.hits.*._source",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.hits.hits.*._type",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.hits.hits.*.fields",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.hits.max_score",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.hits.total",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.timed_out",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.data.*.took",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.summary.timed_out",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.summary.total_hits",
                    "data_type": "numeric",
                    "example_values": [
                        40
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Total hits: 40, Timed out: False"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "on poll",
            "identifier": "on_poll",
            "description": "Run a query in elasticsearch and ingest the results",
            "verbose": "This will run a query in elasticsearch using the <b>index</b>, <b>type</b>, <b>routing</b>, and <b>query</b> configured in the app settings and ingest the results. The <b>query</b> is not modified by Phantom in any way before being requested in elasticsearch. This means that the <b>query</b> must account for relative time between ingestion runs, query limits, and page sizes.<br><br>The <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html\">raw JSON response</a> from elasticsearch is passed to a parser script which returns a list of containers and artifacts. If a custom parsing script is not provided, the <a href=\"/app_resource/elasticsearch_fde8b9da-d38c-45c2-832a-1e1c543ed287/elasticsearch_parser.py\">default parsing script</a> is used:<br><pre class=\"shell\"><code>def ingest_parser(data):\n    results = []\n    if not isinstance(data, dict):\n        return results\n\n    hits = data.get('hits', {}).get('hits', [])\n    for hit in hits:\n        container = {}\n        artifacts = []\n\n        # anything printed to stdout will be added to the phantom debug logs\n        print('Found hit {}. Building container'.format(hit['_id']))\n\n        container['run_automation'] = False\n        container['source_data_identifier'] = hit['_id']\n        container['name'] = 'Elasticsearch: {} {} {}'.format(hit['_index'],\n                                                             hit['_type'],\n                                                             hit['_id'])\n\n        artifacts.append({\n            # always True since there is only one\n            'run_automation': True,\n            'label': 'event',\n            'name': 'elasticsearch event',\n            'cef': hit.get('_source'),\n            'source_data_identifier': hit['_id']\n        })\n\n        results.append({\n            'container': container,\n            'artifacts': artifacts\n        })\n\n    return results\n</code></pre>.",
            "type": "ingest",
            "read_only": true,
            "parameters": {
                "container_id": {
                    "description": "Limit ingestion to these container IDs",
                    "data_type": "string"
                },
                "start_time": {
                    "description": "Start of time range in epoch time (default: 10 days ago)",
                    "data_type": "numeric"
                },
                "end_time": {
                    "description": "End of time range in epoch time (default: now)",
                    "data_type": "numeric"
                },
                "container_count": {
                    "description": "Maximum number of containers to create",
                    "data_type": "numeric"
                },
                "artifact_count": {
                    "description": "Maximum number of artifacts to create per container",
                    "data_type": "numeric"
                }
            },
            "output": [],
            "versions": "EQ(*)"
        }
    ],
    "pip_dependencies": {
        "wheel": [
            {
                "module": "certifi",
                "input_file": "wheels/certifi-2021.10.8-py2.py3-none-any.whl"
            },
            {
                "module": "chardet",
                "input_file": "wheels/chardet-3.0.4-py2.py3-none-any.whl"
            },
            {
                "module": "idna",
                "input_file": "wheels/idna-2.10-py2.py3-none-any.whl"
            },
            {
                "module": "requests",
                "input_file": "wheels/requests-2.25.0-py2.py3-none-any.whl"
            },
            {
                "module": "urllib3",
                "input_file": "wheels/urllib3-1.26.8-py2.py3-none-any.whl"
            }
        ]
    }
}